#!/usr/bin/env node

var fs = require('fs');
var citation = require('../citation');

var optimist = require('optimist');
var args = optimist
  .boolean("pretty")
  .boolean("judicial")
  .usage("Extract legal citations from text.")
  .alias('input', 'i')
  .alias('output', 'o')
  .alias('pretty', 'p')
  .alias('types', 't')
  .alias('option', 'x')
  .alias('help', 'h')
  .describe('input', 'Path to file to read for input.')
  .describe('output', 'Path to file to write output.')
  .describe('pretty', 'Prettify JSON output.')
  .describe('judicial', 'Detect court opinion cites using walverine.')
  .describe('parents', 'Include additional citations for parent sections.')
  .describe('types', 'Limit citation types to a comma-separated list (e.g. "usc,law")')
  .describe('filter', 'Apply a named filter, e.g. \'lines\', to results.')
  .describe('excerpt', 'Number of characters of excerpt surrounding matches to include.')
  .describe('option', 'Set a citator-specific option, e.g. --option dc_code/source=dc_code')
  .describe('help', 'Show this message.')
  .argv;

if (args.help) {
  console.log(optimist.help());
  process.exit(0);
}

// load walverine if asked
if (args.judicial)
  citation.types.judicial = require("../citations/judicial");

/**
  Read text from STDIN or a file, send it into Citation.find(),
  and output the resulting JSON into STDOUT or a file.
*/

// file input
if (args.input) {
  var filename = args.input;
  if (fs.existsSync(filename)) {
    fs.readFile(filename, "utf8", function(err, text) {
      if (!err)
        cite(text);
      else {
        console.log(err);
        process.exit(-1);
      }
    });
  } else {
    console.log("Can't find file: " + filename);
    process.exit(-1);
  }
}

// command line argument
else if (args._[0]) {
  cite(args._[0]);
}

// stdin (will hang if nothing is piped in)
else {
  var text = "";
  process.stdin.resume();

  process.stdin.on('data', function(data) {
    text += data;
  });

  process.stdin.on('error', function(error) {
    console.log(err);
    process.exit(-1);
  });

  process.stdin.on('end', function() {
    cite(text);
  });
}

// actually extract the citations
function cite(text) {
  var options = {};
  if (args.excerpt) options.excerpt = args.excerpt;
  if (args.types) options.types = args.types.split(",");
  if (args.parents) options.parents = true;
  if (args.filter) {
    options.filter = args.filter;
    if (args[options.filter])
      options[options.filter] = args[options.filter];
  }
  if (args.option) {
    // An array of strings in the form path/to/key=value.
    if (typeof args.option == "string") args.option = [args.option]; // promote to array
    for (var i = 0; i < args.option.length; i++) {
       // Split into ['path/to/key', 'value'].
       var kv = args.option[i].split("=", 2);
       var key = kv[0].split('/');
       var obj = options;
       // Walk the options object down 'path' and 'to', creating objects where necessary.
       for (var j = 0; j < key.length-1; j++) {
          if (typeof obj[key[j]] == "undefined")
             obj[key[j]] = { };
          obj = obj[key[j]];
       }
       // Set 'key' on the innermost object to 'value'.
       obj[key[key.length-1]] = kv[1];
    }
  }

  output(citation.find(text, options));
}

// will either be output file or stdout
function output(results) {

  var json;
  if (args.pretty)
    json = JSON.stringify(results, null, 2);
  else
    json = JSON.stringify(results);

  if (args.output) {
    fs.writeFileSync(args.output, json, "utf8");
    console.log("Written to " + args.output + ".");
  } else
    console.log(json);

  process.exit(0);
}
