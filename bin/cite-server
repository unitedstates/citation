#!/usr/bin/env node

// tiny API over Citation.js' find command

var Citation = require('../citation');

var route = function(req, res) {
  var text = req.param("text");
  var options = req.param("options");
  var pretty = req.param("pretty");

  if (text) {

    text = decodeURIComponent(text);

    // allow citation types to be comma-separated
    if (options && options.types)
      options.types = options.types.split(",");

    var results = Citation.find(text, options);

    var response = {results: results};
    if (options) response.options = options;

    var json;
    if (pretty)
      json = JSON.stringify(response, null, 4);
    else
      json = JSON.stringify(response);

    // JSONP
    if (req.query.callback)
      json = "" + req.query.callback + "(" + json + ")";

    res.set({'Content-Type': 'application/json'});
    res.send(json);
  } else {
    res.send("Include a block of text to scan for citations in the 'text' parameter.", 500);
  }
};

// server configuration

var express = require('express');
var app = module.exports = express();

app.configure(function(){
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(__dirname + '/public'));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});


app.get('/citation/find', route);
app.post('/citation/find', route);


// Start server
var port = parseInt(process.argv[2], 10);
if (isNaN(port)) port = 3000;

app.configure('development', function() {
  require('reloader')({
    watchModules: true,
    onReload: startServer
  });
});

app.configure('production', startServer);

function startServer() {
  app.listen(port, function() {
    console.log("Express server listening on port %s in %s mode", port, app.settings.env);
  });
}
